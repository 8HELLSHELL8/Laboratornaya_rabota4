package main

import (
	"fmt"
	"math"
	"math/rand"
	"time"
)

func generateFirstArray() []int {
	rand.Seed(time.Now().UnixNano())
	firstArray := make([]int, 0, 50)
	for len(firstArray) < 50 {
		firstArray = append(firstArray, rand.Intn(100)+1)
	}
	return firstArray
}

func generateSecondArray() []int {
	rand.Seed(time.Now().UnixNano())
	secondArray := make([]int, 0, 100)
	for len(secondArray) < 100 {
		secondArray = append(secondArray, rand.Intn(100)+1)
	}
	return secondArray
}

func generateThirdArray() []int {
	rand.Seed(time.Now().UnixNano())
	thirdArray := make([]int, 0, 1000)
	for len(thirdArray) < 1000 {
		thirdArray = append(thirdArray, rand.Intn(100)+1)
	}
	return thirdArray
}

func average(vec []int) float64 {
	sum := 0
	for _, num := range vec {
		sum += num
	}
	return float64(sum) / float64(len(vec))
}

func stdDev(vec []int) float64 {
	avg := average(vec)
	sum := 0.0
	for _, num := range vec {
		sum += math.Pow(float64(num)-avg, 2)
	}
	return math.Sqrt(sum / float64(len(vec)-1))
}

func frequency(vec []int) int {
	volume := len(vec)
	return int(math.Floor(1 + math.Log2(float64(volume))))
}

func delta(vec []int) float64 {
	maxNum := float64(maxElement(vec))
	minNum := float64(minElement(vec))
	n := frequency(vec)
	return math.Ceil((maxNum - minNum) / float64(n))
}

func maxElement(vec []int) int {
	maxNum := vec[0]
	for _, num := range vec {
		if num > maxNum {
			maxNum = num
		}
	}
	return maxNum
}

func minElement(vec []int) int {
	minNum := vec[0]
	for _, num := range vec {
		if num < minNum {
			minNum = num
		}
	}
	return minNum
}

func noLessProc(vec *[][2]int, teoretver *[]float64) {
	for i := len(*vec) - 1; i > 0; i-- {
		if (*vec)[i][1] < 5 {
			(*vec)[i-1][1] += (*vec)[i][1]
			*vec = append((*vec)[:i], (*vec)[i+1:]...)
			(*teoretver)[i-1] += (*teoretver)[i]
			*teoretver = append((*teoretver)[:i], (*teoretver)[i+1:]...)
		}
	}
	if (*vec)[0][1] < 5 {
		(*vec)[1][1] += (*vec)[0][1]
		*vec = append((*vec)[1:], (*vec)[2:]...)
		(*teoretver)[1] += (*teoretver)[0]
		*teoretver = append((*teoretver)[1:], (*teoretver)[2:]...)
	}
}

func xiSquare(vec []int) {
	originalVectorLength := len(vec)
	step := delta(vec)
	numberOfIntervals := frequency(vec)
	startNumber := minElement(vec)
	minNumVec := startNumber
	maxNumVec := maxElement(vec)
	nj := make([][2]int, 0)
	pj := make([]float64, 0)

	for i := 0; i < numberOfIntervals; i++ {
		counter := 0
		for j := 0; j < len(vec); j++ {
			if vec[j] >= startNumber && vec[j] <= startNumber+int(step) {
				counter++
				vec = append(vec[:j], vec[j+1:]...)
				j--
			}
		}
		pj = append(pj, float64(startNumber+int(step)-startNumber)/float64(maxNumVec-minNumVec))
		nj = append(nj, [2]int{i + 1, counter})
		startNumber += int(step)
	}

	sum := 0.0
	for _, chislo := range pj {
		sum += chislo
	}
	if sum != 1 {
		pj[len(pj)-1] += 1 - sum
	}

	ptj := make([]float64, len(nj))
	for i:= range nj {
		ptj[i] = float64(originalVectorLength) * pj[i]
	}

	xi2 := make([]float64, len(ptj))
	for i := 0; i < len(ptj); i++ {
		xi2[i] = math.Pow(float64(nj[i][1])-ptj[i], 2) / ptj[i]
	}

	resultXI2 := 0.0
	for _, chislo := range xi2 {
		resultXI2 += chislo
	}

	critValue := xiCriticalValue(len(ptj)-1, 0.05)
	if critValue < resultXI2 {
		fmt.Println("The array is distributed normally")
		fmt.Printf("Expected number - %d\n", len(ptj)-1)
		fmt.Printf("Practical number - %f\n", resultXI2/float64(len(xi2)))
	} else {
		fmt.Println("The array is distributed evenly")
		fmt.Printf("Expected number - %d\n", len(ptj)-1)
		fmt.Printf("Practical number - %f\n", resultXI2/float64(len(xi2)))
	}
}

func xiCriticalValue(freedomDegree int, alpha float64) float64 {
	// Calculate the critical value
	criticalValue := 0.0
	for i := 0; i < freedomDegree; i++ {
		criticalValue += math.Pow(xiPDF(i, alpha), -1)
	}
	return criticalValue
}

func xiPDF(k int, alpha float64) float64 {
	// Calculate the xi probability density function
	pdf := 0.0
	for i := 0; i <= k; i++ {
		pdf += math.Pow(-1, float64(i)) * math.Pow(alpha, float64(i)) * math.Exp(-alpha) / float64(math.Gamma(float64(i+1)))
	}
	return pdf
}

func main() {
	firstArray := generateFirstArray()
	secondArray := generateSecondArray()
	thirdArray := generateThirdArray()
	fmt.Println("***Freedom degree number is equal to Expected number***\n")

	xiSquare(firstArray)
	fmt.Println()
	xiSquare(secondArray)
	fmt.Println()
	xiSquare(thirdArray)
	fmt.Println()
}
